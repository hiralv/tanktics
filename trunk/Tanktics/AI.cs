using System;
using System.Collections.Generic;
using System.Text;


namespace Tanktics
{
    public class moves
    {
        public int x;
        public int y;

        public moves()
        {

        }

        public moves(int x, int y)
        {
            this.x = x;
            this.y = y;
        }
    }
   
    class AI
    {
        static public int[,] map;
        static public int[,] values = new int[25, 25] {  
                            {1, 2,	3,	4,	5,	10,	15,	20,	25,	30,	35,	40,	45,	40,	35,	30,	25,	20,	15,	10,	 5,	 1,	 1,	 1,	1},
                            {2,	2,	3,	4,	5,	11,	16,	21,	26,	31,	36,	41,	46,	41,	36,	31,	26,	21,	16,	11,	 6,	 1,	 1,	 1,	1},
                            {3,	3,	3,	4,	5,	10,	15,	20,	25,	30,	-4,	-4,	50,	-4,	-4,	30,	25,	20,	15,	10,	 5,	 1,	 1,	 1,	1},
                            {4,	4,	4,	4,	5,	10,	15,	20,	25,	30,	-4,	50,	55,	50,	-4,	30,	25,	20,	15,	10,	 5,	 1,	 1,	 1,	1},
                            {5,	5,	5,	5,	5,	11,	16,	21,	26,	31,	-4,	46,	51,	46,	-4,	31,	26,	21,	16,	11,	 6,	 5,	 5,  6,	5},
                            {10,11,	10,	10,	11,	11,	16,	21,	26,	31,	36,	41,	45,	41,	36,	31,	26,	21,	16,	11,	11, 10, 10, 11, 10},
                            {15,16,	15,	15,	15,	16,	16,	21,	26,	31,	36,	40,	40,	40,	36,	31,	26,	21,	16,	16,	16,	15, 15, 16, 15},
                            {20,21,	20,	20,	20,	21,	21,	21,	26,	31,	0,	0,	0,	0,	0,	31,	26,	21,	21, 21,	21,	20, 20, 21, 20},
                            {25,26,	25,	25,	25,	26,	26,	26,	26,	31,	0,	0,	0,	0,	0,	31,	26,	26,	26, 26, 26,	25, 25, 26, 25},
                            {30,31,	30,	30,	30,	31,	31,	31,	31,	31,	0,	0,	0,	0,	0,	31,	31,	31,	31, 31,	31,	30, 30, 31, 30},
                            {35,36,	-4,	-4,	-4,	36,	35,	0,	0,	0,	4,	0,	0,	0,	4,	0,	0,	0,	0,  36, -4, -4, -4, 36, 35},
                            {40,41,	-4,	50,	46,	40,	40,	0,	0,	0,	4,	2,	2,	2,	4,	0,	0,	0,	0,  41,	2,	2, -4, 41, 40},
                            {45,46,	50,	55,	50,	46,	45,	0,	0,	0,	4,	2,	2,	2,	4,	0,	0,	0,	0,  46, 50, 55, 50, 46, 45},
                            {40,41,	-4,	50,	46,	41,	40,	0,	0,	0,	4,	2,	2,	2,	4,	0,	0,	0,	0,  41, 46, 50, -4, 41, 40},
                            {35,36,	-4,	-4,	-4,	36,	35,	0,	0,	0,	4,	0,	0,	0,	4,	0,	0,	0,	0,  36, -4, -4, -4, 36, 35},
                            {30,31,	30,	30,	31,	31,	31,	31,	31,	31,	0,	0,	0,	0,	0,	31,	31,	31,	31,  31, 31, 30, 30, 31, 30},
                            {25,26,	25,	25,	26,	26,	26,	26,	26,	31,	0,	0,	0,	0,	0,	31,	26,	26,	26,  26, 26, 25, 25, 26, 25},
                            {20,21,	20,	20,	21,	21,	21,	21,	26,	31,	0,	0,	0,	0,	0,	31,	26,	21,	21,  21, 21, 20, 20, 21, 20},
                            {15,16,	15,	15,	16,	16,	16,	21,	26,	31,	0,	0,	0,	0,	0,	31,	26,	21,	16,  16, 16, 15, 15, 16, 15},
                            {10,11,	10,	10,	11,	11,	16,	21,	26,	31,	36,	41,	45,	41,	36,	31,	26,	21,	16,	11,11, 10, 10, 11, 10},
                            {5,	6,	5,	5,	6,	6,	16,	21,	26,	31,	-4,	46,	50,	46,	-4,	31,	26,	21,	16,	11,	6,	5,	5,	6,  5},
                            {1,	1,	1,	1,	5,	10,	15,	20,	25,	30,	-4,	50,	55,	50,	-4,	30,	25,	20,	15,	10,	5,	1,	1,	1,	1},
                            {1,	1,	1,	1,	5,	10,	15,	20,	25,	30,	-4,	-4,	50,	-4,	-4,	30,	25,	20,	15,	10,	5,	1,	1,	1,	1},
                            {1,	1,	1,	1,	5,	11,	16,	21,	26,	31,	36,	41,	46,	41,	36,	31,	26,	21,	16,	11,	6,	1,	1,	1,	1},
                            {1,	1,	1,	1,	5,	10,	15,	20,	25,	30,	35,	40,	45,	40,	35,	30,	25,	20,	15,	10,	5,	1,	1,	1,	1}};

        
        public AI()
        {
            map = new int[25, 25];

            for (int i = 0; i < 25; i++)
            {
                for (int j = 0; j < 25; j++)
                {
                    map[i, j] = 0;
                }
            }
        }

        public moves FindBestPossibleMove(List<moves> possiblemoves)
        {
            
            Random ran = new Random();
            moves move = new moves();
            int ret = ran.Next(possiblemoves.Count);
            move = possiblemoves[ret];
            int max = values[move.x, move.y];

            for (int i = 0; i < possiblemoves.Count; i++)
            {
                if (values[possiblemoves[i].x, possiblemoves[i].y] > max)
                {
                    max = values[possiblemoves[i].x, possiblemoves[i].y];
                    move = possiblemoves[i];
                }
            }
            
            return move;
        }

    }


}
